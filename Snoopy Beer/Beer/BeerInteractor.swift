//
//  BeerInteractor.swift
//  Snoopy Beer
//
//  Created by Frederick Dupray on 08/06/2020.
//  Copyright (c) 2020 SnoopyBeer. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BeerBusinessLogic {
    func fetchBeer(request: Beer.FetchBeer.Request)
    func updateFavouriteStatus(request: Beer.UpdateFavouriteStatus.Request)
}

protocol BeerDataStore {
    var beers: [Beer.Parseable.BeerModel] { get set }
    var selectedBeer: Beer.BeerViewModel? { get set }
}

class BeerInteractor: BeerBusinessLogic, BeerDataStore, BeerWorkerDelegate, Favouritable {
    
    var favouriteManager: FavouriteManager = FavouriteManager()
    
    var presenter: BeerPresentationLogic?
    var worker: BeerWorker = BeerWorker()
    
    //Beer cache
    var beers: [Beer.Parseable.BeerModel] = []
    
    //Beer we wish to pass on to beer detail
    var selectedBeer: Beer.BeerViewModel?
    
    init() {
        worker.delegate = self
    }
    
    func fetchBeer(request: Beer.FetchBeer.Request) {
        worker.fetchBeer()
    }
    
    //Called when beer is successfully fetched
    func didFetchBeer(_ beerModels: [Beer.Parseable.BeerModel]) {
        
        //Update beer models
        beers = beerModels
        
        //Present fetched beers
        let response = Beer.FetchBeer.Response(models: beerModels)
        self.presenter?.presentBeer(response: response)
    }
    
    //Update the favourite status for id
    func updateFavouriteStatus(request: Beer.UpdateFavouriteStatus.Request) {
        
        if request.isFavourite {
            favouriteManager.removeFromFavourites(id: request.id)
        }
        else {
            favouriteManager.addToFavourites(id: request.id)
        }
        
        presenter?.presentUpdatedFavouriteStatus(response: Beer.UpdateFavouriteStatus.Response(models: beers))
    }
}
