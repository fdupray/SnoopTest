//
//  BeerViewController.swift
//  Snoopy Beer
//
//  Created by Frederick Dupray on 08/06/2020.
//  Copyright (c) 2020 SnoopyBeer. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BeerDisplayLogic: class {
    func displayBeer(viewModel: Beer.FetchBeer.ViewModel)
    func displayUpdatedFavouriteStatus(viewModel: Beer.FetchBeer.ViewModel)
}

class BeerViewController: UIViewController {
    
    typealias BeerViewModel = Beer.BeerViewModel
    
    //Interface builder objects
    @IBOutlet weak var tableView: UITableView!
  
    var interactor: BeerBusinessLogic?
    var router: (NSObjectProtocol & BeerRoutingLogic & BeerDataPassing)?
    
    //Models
    var beerModels: [BeerViewModel] = []
    
    //Flag
    var isFetchingBeers = false

    // MARK: SETUP / INIT
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        //Set up
        setUpTableView()
        //Fetch data
        fetchBeers()
    }
    
    func setUpTableView() {
        tableView.delegate = self
        tableView.dataSource = self
    }
    
    func fetchBeers() {
        isFetchingBeers = true
        interactor?.fetchBeer(request: Beer.FetchBeer.Request())
    }
    
    //When beer is liked, we need to update the array with new values and save the id of said beer. So trigger a new cycle.
    func updateFavouriteStatus(forId id: String, isFavourite: Bool) {
        interactor?.updateFavouriteStatus(request: Beer.UpdateFavouriteStatus.Request(id: id, isFavourite: isFavourite))
    }
}

extension BeerViewController: BeerDisplayLogic {
    
    //Display BeerModels in table view
    func displayBeer(viewModel: Beer.FetchBeer.ViewModel) {
        isFetchingBeers = false
        beerModels = viewModel.models
        tableView.reloadData()
    }
    
    //Update beerModels array
    func displayUpdatedFavouriteStatus(viewModel: Beer.FetchBeer.ViewModel) {
        beerModels = viewModel.models
    }
}

extension BeerViewController: UITableViewDelegate, UITableViewDataSource {
    
    func selectBeer(model: BeerViewModel) {
        var dataStore = router?.dataStore
        dataStore?.selectedBeer = model
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        selectBeer(model: beerModels[indexPath.row])
        router?.routeToBeerDetail()
    }
        
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        let height: CGFloat = 70
        return height
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return beerModels.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        //Get relevant beer
        let beerViewModel = beerModels[indexPath.row]
        let beerId = "\(beerViewModel.beer.id)"
        
        //Get relevant reusable cell
        let cell = tableView.dequeueReusableCell(withIdentifier: BeerTableViewCell.reuseIdentifier) as! BeerTableViewCell
        
        //Configure cell
        cell.configure(beerViewModel: beerViewModel, favouriteButtonTappedAction: { [weak self] isFavourite in
            
            guard let _self = self else {
                return
            }
            //If beer is already liked then unlike and vice versa
            _self.updateFavouriteStatus(forId: beerId, isFavourite: isFavourite)
        })
        
        return cell
    }
    
    //Load more content into the cell
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        
        let contentOffsetY = scrollView.contentOffset.y
        let threshold = scrollView.contentSize.height - scrollView.frame.height
        
        guard contentOffsetY > threshold, !isFetchingBeers else {
            return
        }
            
        fetchBeers()
    }
}

extension BeerViewController {
    
    //Setup VIP cycle
    private func setup() {
        let viewController = self
        let interactor = BeerInteractor()
        let presenter = BeerPresenter()
        let router = BeerRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
}
