//
//  BeerModels.swift
//  Snoopy Beer
//
//  Created by Frederick Dupray on 08/06/2020.
//  Copyright (c) 2020 SnoopyBeer. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation
import UIKit

protocol Describable {
    
}

enum Beer {
    
    struct BeerViewModel {
        let beer: Parseable.BeerModel
        let isFavourite: Bool
    }
    
    //Models for fetch beer cycle
    enum FetchBeer {
        
        struct Request {
            //Empty but good practice to keep it
        }
        
        struct Response {
            let models: [Parseable.BeerModel]
        }
        
        struct ViewModel {
            let models: [BeerViewModel]
        }
    }
    
    //Models for update favourite status cycle
    enum UpdateFavouriteStatus {
        
        struct Request {
            var id: String
            var isFavourite: Bool
        }
        
        struct Response {
            let models: [Parseable.BeerModel]
        }
        
        struct ViewModel {
            let models: [BeerViewModel]
        }
    }
    
    //JSON objects
    enum Parseable {
        
        struct BeerModel: Codable {
            
            let id: Int
            let name: String
            let description: String
            let image_url: String
            let abv: Double
            let ingredients: IngredientsModel
            let food_pairing: [String]
        }

        struct IngredientsModel: Codable {
            
            let malt: [MaltModel]
            let hops: [HopsModel]
            
            var description: String {
                let list = malt.map({ $0.description }) + hops.map({ $0.description })
                return list.joined(separator: "/n")
            }
        }

        struct MaltModel: Codable {
            
            let name: String
            let amount: AmountModel
            
            var description: String {
                return "\(amount.description) of \(name)"
            }
        }

        struct HopsModel: Codable {
            
            let name: String
            let amount: AmountModel
            let add: String
            let attribute: String
            
            var description: String {
                return "\(add): \(amount.description) of \(name) [\(attribute)]"
            }
        }

        struct AmountModel: Codable {
            
            let value: Double
            let unit: String
            
            var description: String {
                return "\(value) \(unit)"
            }
        }
    }
}
